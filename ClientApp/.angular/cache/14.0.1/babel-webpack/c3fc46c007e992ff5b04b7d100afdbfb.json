{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { ToastrService } from 'ngx-toastr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nlet NotificationService = class NotificationService {\n  constructor(toastr) {\n    this.toastr = toastr;\n  }\n\n  showSuccess(message, title) {\n    this.toastr.success(message, title);\n  }\n\n  showError(message, title) {\n    this.toastr.error(message, title);\n  }\n\n  showInfo(message, title) {\n    this.toastr.info(message, title);\n  }\n\n  showWarning(message, title) {\n    this.toastr.warning(message, title);\n  }\n\n};\n\nNotificationService.ɵfac = function NotificationService_Factory(t) {\n  return new (t || NotificationService)(i0.ɵɵinject(i1.ToastrService));\n};\n\nNotificationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NotificationService,\n  factory: NotificationService.ɵfac,\n  providedIn: 'root'\n});\nNotificationService = __decorate([__param(0, Inject(ToastrService)), __metadata(\"design:paramtypes\", [ToastrService])], NotificationService);\nexport { NotificationService };","map":null,"metadata":{},"sourceType":"module"}