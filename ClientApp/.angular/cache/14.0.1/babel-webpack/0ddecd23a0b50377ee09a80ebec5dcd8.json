{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Inject } from '@angular/core';\nimport { NotificationService } from './services/notification.service';\nlet AppErrorHandler = class AppErrorHandler {\n  constructor(notiftyService) {\n    this.notiftyService = notiftyService;\n  }\n\n  handleError(error) {\n    console.log(\"ERROR\");\n    this.notiftyService.showError(\"Something is wrong\", \"Error\");\n  }\n\n};\nAppErrorHandler = __decorate([Injectable({\n  providedIn: 'root'\n}), __param(0, Inject(NotificationService)), __metadata(\"design:paramtypes\", [NotificationService])], AppErrorHandler);\nexport { AppErrorHandler };","map":null,"metadata":{},"sourceType":"module"}