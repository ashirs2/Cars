{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { HttpXhrBackend } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nexport let ProgressService = /*#__PURE__*/(() => {\n  class ProgressService {\n    constructor() {\n      this.uploadProgress = new Subject();\n    }\n\n    startTracking() {\n      this.uploadProgress = new Subject();\n      return this.uploadProgress;\n    }\n\n    notify(progress) {\n      if (this.uploadProgress) this.uploadProgress.next(progress);\n    }\n\n    endTracking() {\n      if (this.uploadProgress) this.uploadProgress.complete();\n    }\n\n  }\n\n  ProgressService.ɵfac = function ProgressService_Factory(t) {\n    return new (t || ProgressService)();\n  };\n\n  ProgressService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProgressService,\n    factory: ProgressService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProgressService;\n})();\nexport let BrowserXhrWithProgress = /*#__PURE__*/(() => {\n  class BrowserXhrWithProgress extends HttpXhrBackend {\n    constructor(service) {\n      this.service = service;\n      service.super();\n    }\n\n    build() {\n      var xhr = super.build();\n\n      xhr.onprogress = event => {\n        this.service.downloadProgress.next({});\n      };\n\n      xhr.upload.onprogress = event => {\n        this.service.uploadProgress.next({});\n      };\n\n      return xhr;\n    }\n\n    createProgress(event) {\n      return {\n        total: event.total,\n        percentage: Math.round(event.loaded / event.total * 100)\n      };\n    }\n\n  }\n\n  BrowserXhrWithProgress.ɵfac = function BrowserXhrWithProgress_Factory(t) {\n    return new (t || BrowserXhrWithProgress)(i0.ɵɵinject(ProgressService));\n  };\n\n  BrowserXhrWithProgress.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BrowserXhrWithProgress,\n    factory: BrowserXhrWithProgress.ɵfac\n  });\n  return BrowserXhrWithProgress;\n})();","map":null,"metadata":{},"sourceType":"module"}